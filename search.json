[{"path":[]},{"path":"https://jbryer.github.io/ShinyQDA/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://jbryer.github.io/ShinyQDA/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement jason@bryer.org. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://jbryer.github.io/ShinyQDA/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jbryer.github.io/ShinyQDA/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://jbryer.github.io/ShinyQDA/articles/setup.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Setting Up a ShinyQDA Project","text":"can install ShinyQDA package Github using remotes package: Eventually able install CRAN using following command: Much ShinyQDA application implemented using Shiny modules. package dependencies module isntalled using default dependencies values. Although minor inconvenience installation time, ensures ShinyQDA minimizes packages strict dependencies encouraged CRAN check process. required packages available module display message list missing packages Shiny application.","code":"remotes::install_github('jbryer/ShinyQDA', dependencies = c('Depends', 'Imports', 'Suggests)) install.packages('ShinyQDA', dependencies = c('Depends', 'Imports', 'Suggests))"},{"path":"https://jbryer.github.io/ShinyQDA/articles/setup.html","id":"creating-new-project","dir":"Articles","previous_headings":"","what":"Creating New Project","title":"Setting Up a ShinyQDA Project","text":"utilize ShinyQDA application need initialize data. minimum need data frame two columns: unique identifier text data, although can pass columns along preserved analysis later. following example small subset Diagnostic Assessment Achievement College Skills (DAACS) analyzed paper title College students’ responses automated feedback self-regulated learning (Yu et al., 2023). DAACS assesses key college skills self-regulated learning, writing, mathematics reading comprehension. writing assessment students asked identify strategies self-regulated learning can improve use successful. Students received scores machine learning algorithm scores included demonstrate rubric features ShinyQDA. daacs_data data frame includes 17 essays along writing self-regulation scores two coders/raters. subset 100 essays coded five people Yu et al. (2023) paper. can run application using following command. remainder document outline steps setup ShinyQDA pre-existing data. command create director name/dir/, copy app.R Shiny script, initialize SQLite database contents qda_data data frame parameter. can now run application begin working qualitative data. following section discuss can populate ShinyQDA application pre-existing data. Note initialize_sentiment_dictionaries = TRUE prompted four times download four sentiment dictionaries. required intend sentiment analysis. Please check licenses databases using production.","code":"shiny::runApp(paste0(find.package('ShinyQDA'), '/daacs_demo/')) library(ShinyQDA) data(\"daacs_data\", package = 'ShinyQDA')  ShinyQDA::new_app(name = 'daacs_demo',                   dir = getwd(),                   qda_data = daacs_data,                   id_column = 'id',                   text_column = 'qda_text',                   initialize_sentiment_dictionaries = TRUE,                   run_app = FALSE)"},{"path":"https://jbryer.github.io/ShinyQDA/articles/setup.html","id":"setting-up-coding-and-scoring-schemes","dir":"Articles","previous_headings":"","what":"Setting up coding and scoring schemes","title":"Setting Up a ShinyQDA Project","text":"ShinyQDA package uses SQLite database store data. qda() function wrapper database providing functions select, insert, delete data using R functions (.e. SQL knowledge required!). following code create qda object load data package including codings, text responses, rubric scores, respectively.","code":"daacs_qda <- ShinyQDA::qda('daacs_demo/qda.sqlite')  data(\"daacs_codings\", package = 'ShinyQDA') data(\"daacs_text_responses\", package = 'ShinyQDA') data(\"daacs_rubric\", package = 'ShinyQDA')"},{"path":"https://jbryer.github.io/ShinyQDA/articles/setup.html","id":"text-questions","dir":"Articles","previous_headings":"Setting up coding and scoring schemes","what":"Text Questions","title":"Setting Up a ShinyQDA Project","text":"Text questions questions want coder respond text document. , one set questions text document. Going Setup -> Questions menu application allow add questions application. ShinyQDA currently supports checkbox questions, radio button questions, open text fields. questions show left hand side coding view.  Alternatively, can add text questions manually qda object. can get data frame specified text questions using get_text_questions() function.","code":"daacs_qda$add_text_question(stem = 'Non-responsive to prompt',                             type = 'checkbox') daacs_qda$add_text_question(stem = 'Additional comments about the text',                             type = 'text') daacs_qda$get_text_questions()"},{"path":"https://jbryer.github.io/ShinyQDA/articles/setup.html","id":"code-questions","dir":"Articles","previous_headings":"Setting up coding and scoring schemes","what":"Code Questions","title":"Setting Up a ShinyQDA Project","text":"Code questions similar text questions except can multiple responses per text document. users highlights text clicks Add Code button, dialog box appear. first input place enter individual codes (see next section) along arbitrary set questions defined either Setup -> Questions UI using following commands.","code":"daacs_qda$add_code_question(     stem = 'Content of Essay',     type = 'checkbox',     options = c('Definition of concepts',                 'Interpretation_strength',                 'Interpretation_weakness',                 'Interpretation_mixed',                 'Interpretation_medium',                 'Interpretation_strategies awareness',                 'Interpretation_strategies commitment',                 'Interpretation_judgments') ) daacs_qda$add_code_question(     stem = 'Does this text represent',     type = 'checkbox',     options = c('Strength',                 'Weakness',                 'Mixed',                 'Medium',                 'Strategies Awareness',                 'Strategies Commitment') ) daacs_qda$add_code_question(     stem = 'Judgment about survey or feedback',     type = 'checkbox',     options = c('Agree',                 'Disagree',                 'Valuable/helpful/useful',                 'Not valuable/helpful/useful',                 'Other') )"},{"path":"https://jbryer.github.io/ShinyQDA/articles/setup.html","id":"codes","dir":"Articles","previous_headings":"Setting up coding and scoring schemes","what":"Codes","title":"Setting Up a ShinyQDA Project","text":"Codes core functionality qualitative data anlysis. can define codes using application going Setup -> Codebook page. Alternatively, can add codes qda object. following chunk loop codes setting parent parameter maintain coding hierarchy defined ccategories list .","code":"categories <- list(     'metacognition' = c('planning', 'monitoring', 'evaluation'),     'motivation' = c('mindset', 'test anxiety', 'mastery orientation'),     'self efficacy' = c('self efficacy for online learning',                         'self efficacy for writing',                         'self efficacy for mathematics',                         'self efficacy for reading'),     'strategies' = c('managing environment', 'understanding', 'managing time', 'help seeking'),     'procrastination' = c() ) codes <- c(names(categories), unlist(categories)) |> unname() daacs_qda$add_codes(codes) for(i in seq_len(length(categories))) {     category <- names(categories)[i]     codes <- categories[[i]]     for(i in codes) {         daacs_qda$update_code(i, parent = category)     } }"},{"path":"https://jbryer.github.io/ShinyQDA/articles/setup.html","id":"rubrics","dir":"Articles","previous_headings":"Setting up coding and scoring schemes","what":"Rubrics","title":"Setting Up a ShinyQDA Project","text":"addition coding text documents, can specify rubric coders/raters can use evaluate text docuement. daacs_rubric scoring rubric used scoring (note students see different rubric designed provide feedback positive framework).","code":"daacs_qda$add_rubric(     rubric_name = 'daacs',     description = 'DAACS Scoring Rubric',     rubric = daacs_rubric )"},{"path":"https://jbryer.github.io/ShinyQDA/articles/setup.html","id":"importing-existing-data","dir":"Articles","previous_headings":"","what":"Importing existing data","title":"Setting Up a ShinyQDA Project","text":"following sections provide sample code can prepopulate ShinyQDA application pre-exisiting codings scores.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/articles/setup.html","id":"add-existing-codings","dir":"Articles","previous_headings":"Importing existing data","what":"Add existing codings","title":"Setting Up a ShinyQDA Project","text":"","code":"daacs_code_questions <- daacs_qda$get_code_questions() for(i in seq_len(nrow(daacs_codings))) {     coder <- daacs_codings[i,]$coder     thetext <- daacs_data[daacs_data$id == daacs_codings[i,]$id,]$qda_text     pos <- gregexpr(daacs_codings[i,]$text, thetext, fixed = TRUE)[[1]]     coding_id <- daacs_qda$add_coding(         id = daacs_codings[i,]$id,         text = daacs_codings[i,]$text,         codes = strsplit(daacs_codings[i,]$codes, ';')[[1]],         start = pos,         end = pos + nchar(daacs_codings[i,]$text),         coder = coder     )     for(j in seq_len(nrow(daacs_code_questions))) {         stem <- daacs_code_questions[j,]$stem         if(stem %in% names(daacs_codings)) {             val <- daacs_codings[i,stem]             daacs_qda$add_code_question_response(coding_id = coding_id,                                                  stem = stem,                                                  answer = val,                                                  coder = coder)         }     } }"},{"path":"https://jbryer.github.io/ShinyQDA/articles/setup.html","id":"add-existing-text-questions","dir":"Articles","previous_headings":"Importing existing data","what":"Add existing text questions","title":"Setting Up a ShinyQDA Project","text":"","code":"for(i in seq_len(nrow(daacs_text_responses))) {     daacs_qda$add_text_question_response(         id = daacs_text_responses[i,]$id,         stem = daacs_text_responses[i,]$stem,         answer = daacs_text_responses[i,]$answer,         coder = daacs_text_responses[i,]$coder     ) }"},{"path":"https://jbryer.github.io/ShinyQDA/articles/setup.html","id":"add-rubric-scores","dir":"Articles","previous_headings":"Importing existing data","what":"Add rubric scores","title":"Setting Up a ShinyQDA Project","text":"","code":"for(i in seq_len(nrow(daacs_data))) {     for(j in unique(daacs_rubric$SubCriteria)) {         daacs_qda$add_rubric_response(             rubric_name = 'daacs',             qda_id = daacs_data[i,]$id,             coder = 'Rater1',             criteria = j,             score = daacs_data[i,j,drop=TRUE]         )     } }"},{"path":[]},{"path":"https://jbryer.github.io/ShinyQDA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jason Bryer. Author, maintainer.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bryer J (2023). ShinyQDA: R Package Shiny Application Analysis Qualitative Data. https://github.com/jbryer/ShinyQDA, https://jbryer.github.io/ShinyQDA/.","code":"@Manual{,   title = {ShinyQDA: R Package and Shiny Application for the Analysis of Qualitative Data},   author = {Jason Bryer},   year = {2023},   note = {https://github.com/jbryer/ShinyQDA, https://jbryer.github.io/ShinyQDA/}, }"},{"path":"https://jbryer.github.io/ShinyQDA/index.html","id":"id_-shinyqda-r-package-and-shiny-application-for-the-analysis-of-qualitative-data","dir":"","previous_headings":"","what":"R Package and Shiny Application for the Analysis of Qualitative\n    Data","title":"R Package and Shiny Application for the Analysis of Qualitative\n    Data","text":"Package documentation: https://jbryer.github.io/ShinyQDA/ ShinyQDA package designed assist researchers analysis qualitative data. name suggests, premise much interaction package done Shiny application. However, functionality Shiny application available R command line well. ShinyQDA attempts set traditional qualitative data analysis involves researchers coding /scoring (using rubrics) documents/text natural language processing sentiment analysis, topic modeling, text encoding (.e. tokenization). using Shiny, multiple researchers can access application code /score documents. Note: Qualitative data researchers tend refer text analyze documents. Natural language processing researchers tend refer data text data. try use phrase appropriate feature may used, can often used interchangeably. Screencast ShinyQDA","code":""},{"path":"https://jbryer.github.io/ShinyQDA/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"R Package and Shiny Application for the Analysis of Qualitative\n    Data","text":"install, use remotes package: can demo ShinyQDA application using sample data Diagnostic Assessment Achievement College Skills using following command:","code":"remotes::install_github('jbryer/ShinyQDA', dependencies = c('Depends', 'Imports', 'Suggests)) shiny::runApp(paste0(find.package('ShinyQDA'), '/daacs_demo/'))"},{"path":"https://jbryer.github.io/ShinyQDA/index.html","id":"creating-a-new-shinyqda-application","dir":"","previous_headings":"","what":"Creating a new ShinyQDA application","title":"R Package and Shiny Application for the Analysis of Qualitative\n    Data","text":"ShinyQDA::new_app() function help initialize new application. minimum need data frame two columns: 1. primary key column 2. column containing text data. However, may include columns may want use analysis. example use small subset essasy completed students part Diagnostic Assessment Achievement College Skills (DAACS) project. new_app function create app.R file, qda.sqlite file (SQLite database containing data), well optionally directories containing dictionaries conducting sentiment analysis. also start Shiny application allowing login using username “admin” password “pass”. can run application using followign command: ShinyQDA::qda() acts wrapper database (currently using SQLlite) containing data. number functions available adding, editing, deleting data well accessing specific data elements. However, ShinyQDA::qda_merge() function provide merged data frame original data imported along qualitative data analysis conducted (including sentiment analysis, tokenization, etc.).","code":"data(\"daacs_data\", package = 'ShinyQDA') ShinyQDA::new_app(name = 'daacs_demo',                   dir = getwd(),                   qda_data = daacs_data) shiny::runApp('daacs_demo') daacs_qda <- ShinyQDA::qda('daacs_test/qda.sqlite') daacs_merged <- ShinyQDA::qda_merge(daacs_qda, include_sentiments = TRUE)"},{"path":"https://jbryer.github.io/ShinyQDA/index.html","id":"authentication","dir":"","previous_headings":"","what":"Authentication","title":"R Package and Shiny Application for the Analysis of Qualitative\n    Data","text":"Authentication handled shinymanager R package. default ShinyQDA create administrator user admin pass username password. recommend changing password first sign-. User management (including password changing) handled clicking plus (+) icon lower right hand corner. take shinymanager’s user management mode. data entered ShinyQDA username associated . authentication mode username retrieved shinymanager, otherwise ShinyQDA use value Sys.info()['user'].","code":""},{"path":"https://jbryer.github.io/ShinyQDA/index.html","id":"shinyqda-features","dir":"","previous_headings":"","what":"ShinyQDA Features","title":"R Package and Shiny Application for the Analysis of Qualitative\n    Data","text":"Data entry, coding, scoring features User management via shinymanager package allow multiple coders work dataset internet. Define arbitrary set questions/codes assign document. Current question types include checkbox (multiple selections), radio (choose one list), open text. Highlight text (e.g. word, sentence, paragraph, etc.) text code. open modal dialog add codes. Define arbitrary set questions/codes assign coding (.e. highlighted text). Current question types include checkbox (multiple selections), radio (choose one list), open text. Score documents using rubric. Analysis features: Basic descriptive information individual documents including character, word, sentence, paragraph counts. Sentiment analysis individual document level. Words within document appear specified sentiment dictionary highlighted color coded correspond histogram sentiments within single document. Sentiment analysis across entire database. Varying plots provided approproate sentiment dictionary specified. Co-occurrence plot examine codes co-occur across documents. Word frequency analysis across entire database. Code frequency analysis across codes entered. Word clouds. Topic modeling. Inter-rater reliability analysis. coding split view. Data export features: data table view showing documents along imported metadata, codes, code question responses, document descriptive statistics, sentiment. Data can exported/downloaded CSV Excel. raw database view provided ability export/download Excel (using multiple tabs) raw SQLite database.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/index.html","id":"roadmap","dir":"","previous_headings":"","what":"Roadmap","title":"R Package and Shiny Application for the Analysis of Qualitative\n    Data","text":"Documentation - Need document use app end users. Can always enhance code documentation well. Ability see coders responses (text questions). Merge coding results data export tab. Allow user choose aggregation method. Tokenization - allow user define export/download various tokenization schemes. Predictive modeling - use data (including sentiment, topics, tokenizations, etc.) predict outcome. Queuing user roles - Create scheme limit access certain features depending user role. Allow documents assigned users code/score. Make app prettier / improve design. alternative design started inst/bs4dash/ Convert coding tab use Shiny module framework. New hex logo (design skills great, looking volunteer 😜) Submit CRAN development stable. Ability use databases SQLite. require writing connector shinymanager. Reduce number packages dependencies. packages moved “Suggests” required specific modules. example, add option incude sentiment analyses eliminate need required.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"R Package and Shiny Application for the Analysis of Qualitative\n    Data","text":"Please note ShinyQDA project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/ShinyQDA-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ShinyQDA: R Package and Shiny Application for the Analysis of Qualitative Data — ShinyQDA-package","title":"ShinyQDA: R Package and Shiny Application for the Analysis of Qualitative Data — ShinyQDA-package","text":"package provides tools conduct qualitative data analysis (QDA) R. Shiny application provide interactive way code qualitative data. Utility functions provided analyze data R. Data stored SQL database works database works DBI R package.","code":""},{"path":[]},{"path":"https://jbryer.github.io/ShinyQDA/reference/ShinyQDA-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ShinyQDA: R Package and Shiny Application for the Analysis of Qualitative Data — ShinyQDA-package","text":"Maintainer: Jason Bryer jason@bryer.org (ORCID)","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/check_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to determine whether the package dependencies are available. — check_dependencies","title":"Utility function to determine whether the package dependencies are available. — check_dependencies","text":"Utility function determine whether package dependencies available.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/check_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to determine whether the package dependencies are available. — check_dependencies","text":"","code":"check_dependencies(dependencies)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/check_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to determine whether the package dependencies are available. — check_dependencies","text":"dependencies character vector package names check.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/check_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to determine whether the package dependencies are available. — check_dependencies","text":"TRUE required packages available loaded using base::requireNamespace() function.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/codebook_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Server for the codebook. — codebook_server","title":"Server for the codebook. — codebook_server","text":"Server codebook.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/codebook_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server for the codebook. — codebook_server","text":"","code":"codebook_server(id, qda_data)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/codebook_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server for the codebook. — codebook_server","text":"id ID string corresponds ID used call module's UI function. qda_data QDA data object, see qda().","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/codebook_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"UI for the codebook. — codebook_ui","title":"UI for the codebook. — codebook_ui","text":"UI codebook.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/codebook_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI for the codebook. — codebook_ui","text":"","code":"codebook_ui(id)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/codebook_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI for the codebook. — codebook_ui","text":"id ID string corresponds ID used call module's UI function.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/coding_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Server text coding. — coding_server","title":"Server text coding. — coding_server","text":"Server text coding.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/coding_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server text coding. — coding_server","text":"","code":"coding_server(id, qda_data)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/coding_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server text coding. — coding_server","text":"id ID string corresponds ID used call module's UI function. qda_data QDA data object, see qda().","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/coding_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"UI for text coding. — coding_ui","title":"UI for text coding. — coding_ui","text":"UI text coding.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/coding_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI for text coding. — coding_ui","text":"","code":"coding_ui(id)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/coding_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI for text coding. — coding_ui","text":"id ID string corresponds ID used call module's UI function.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/color_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"This palette was created from https://colorbrewer2.org using qualitative\ntype with 12 classes. There are two schemes given these parameters, the first\n12 are from a lighter palette and the second 12 are from a darker palette. — color_palette","title":"This palette was created from https://colorbrewer2.org using qualitative\ntype with 12 classes. There are two schemes given these parameters, the first\n12 are from a lighter palette and the second 12 are from a darker palette. — color_palette","text":"palette created https://colorbrewer2.org using qualitative type 12 classes. two schemes given parameters, first 12 lighter palette second 12 darker palette.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/color_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This palette was created from https://colorbrewer2.org using qualitative\ntype with 12 classes. There are two schemes given these parameters, the first\n12 are from a lighter palette and the second 12 are from a darker palette. — color_palette","text":"","code":"color_palette"},{"path":"https://jbryer.github.io/ShinyQDA/reference/color_palette.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"This palette was created from https://colorbrewer2.org using qualitative\ntype with 12 classes. There are two schemes given these parameters, the first\n12 are from a lighter palette and the second 12 are from a darker palette. — color_palette","text":"object class character length 24.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/cooccurance_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Co-Occurance Plot — cooccurance_plot","title":"Co-Occurance Plot — cooccurance_plot","text":"Co-Occurance Plot","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/cooccurance_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Co-Occurance Plot — cooccurance_plot","text":"","code":"cooccurance_plot(df, ...)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/cooccurance_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Co-Occurance Plot — cooccurance_plot","text":"df data.frame. ... parameters pass functions.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/cooccurance_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Co-Occurance Plot — cooccurance_plot","text":"Pokorny, Jen & Norman, Alex & Zanesco, Anthony & Bauer-Wu, Susan & Sahdra, Baljinder & Saron, Clifford. (2016). Network Analysis Visualization Analysis Qualitative Data. Psychological Methods. 23. 10.1037/met0000129. Namey, E., Guest, G., Thairu, L., & Johnson, L. (2007). Data reduction techniques large qualitative data sets. G. Guest & K. MacQueen (Eds.), Handbook team-based qualitative research (pp. 137–163). Lanham, MD: Altamira Press. Ryan, G. W. (1999). Measuring typicality text: Using multiple coders just reliability validity checks. Human Organization, 58, 313–322. Saldaña, J. (2013). coding manual qualitative researchers (2nd ed.). Thousand Oaks, CA: Sage.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/daacs.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data from the Diagnostic Assessment and Achievement of College Skills (DAACS) — daacs","title":"Sample data from the Diagnostic Assessment and Achievement of College Skills (DAACS) — daacs","text":"Sample data Diagnostic Assessment Achievement College Skills (DAACS)","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/daacs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data from the Diagnostic Assessment and Achievement of College Skills (DAACS) — daacs","text":"","code":"daacs_data  daacs_codings  daacs_text_responses  daacs_rubric"},{"path":"https://jbryer.github.io/ShinyQDA/reference/daacs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data from the Diagnostic Assessment and Achievement of College Skills (DAACS) — daacs","text":"Data frames. object class data.frame 311 rows 8 columns. object class data.frame 5 rows 4 columns. object class tbl_df (inherits tbl, data.frame) 10 rows 4 columns.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/daacs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data from the Diagnostic Assessment and Achievement of College Skills (DAACS) — daacs","text":"https://daacs.net https://docs.daacs.net/overview/assessments/writing/","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/daacs.html","id":"about-daacs","dir":"Reference","previous_headings":"","what":"About DAACS","title":"Sample data from the Diagnostic Assessment and Achievement of College Skills (DAACS) — daacs","text":"small subset essays, essay scores, self-regulated learning results Diagnostic Assessment Achievement College Skills (DAACS). DAACS suite technological social supports optimize student learning. DAACS provides personalized feedback students' strengths weaknesses terms key academic self-regulated learning skills, linking resources help successful students. data subset essays used ChingYen et al (2023) College Students' Responses Automated Feedback Self-Regulated Learning.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/daacs.html","id":"daacs-data-structure","dir":"Reference","previous_headings":"","what":"daacs_data Structure","title":"Sample data from the Diagnostic Assessment and Achievement of College Skills (DAACS) — daacs","text":"id integer qda_text character content_summary numeric content_suggestions numeric organization_structure numeric organization_transitions numeric paragraphs_ideas numeric paragraphs_cohesion numeric sentences_correct numeric sentences_complexity numeric conventions_usage numeric conventions_punctuation numeric motivation numeric strategies numeric metacognition numeric selfefficacy numeric","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/daacs.html","id":"daacs-coding-structure","dir":"Reference","previous_headings":"","what":"daacs_coding Structure","title":"Sample data from the Diagnostic Assessment and Achievement of College Skills (DAACS) — daacs","text":"coding_id integer coder character id integer text character codes character Content Essay character text represent character Judgment survey feedback character","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/daacs.html","id":"daacs-text-responses-structure","dir":"Reference","previous_headings":"","what":"daacs_text_responses Structure","title":"Sample data from the Diagnostic Assessment and Achievement of College Skills (DAACS) — daacs","text":"id integer stem character answer character coder character","code":""},{"path":[]},{"path":"https://jbryer.github.io/ShinyQDA/reference/data_view_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Server for the data view. — data_view_server","title":"Server for the data view. — data_view_server","text":"Server data view.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/data_view_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server for the data view. — data_view_server","text":"","code":"data_view_server(id, qda_data)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/data_view_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server for the data view. — data_view_server","text":"id ID string corresponds ID used call module's UI function. qda_data QDA data object, see qda().","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/data_view_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"UI for the data view. — data_view_ui","title":"UI for the data view. — data_view_ui","text":"UI data view.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/data_view_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI for the data view. — data_view_ui","text":"","code":"data_view_ui(id)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/data_view_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI for the data view. — data_view_ui","text":"id ID string corresponds ID used call module's UI function.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/descriptives_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Server for the descriptive statistics. — descriptives_server","title":"Server for the descriptive statistics. — descriptives_server","text":"Server descriptive statistics.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/descriptives_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server for the descriptive statistics. — descriptives_server","text":"","code":"descriptives_server(id, qda_data)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/descriptives_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server for the descriptive statistics. — descriptives_server","text":"id ID string corresponds ID used call module's UI function. qda_data QDA data object, see qda().","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/descriptives_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"UI for the descriptive statistics. — descriptives_ui","title":"UI for the descriptive statistics. — descriptives_ui","text":"UI descriptive statistics.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/descriptives_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI for the descriptive statistics. — descriptives_ui","text":"","code":"descriptives_ui(id)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/descriptives_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI for the descriptive statistics. — descriptives_ui","text":"id ID string corresponds ID used call module's UI function.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/find_document_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the column with the longest character string. — find_document_column","title":"Find the column with the longest character string. — find_document_column","text":"Find column longest character string.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/find_document_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the column with the longest character string. — find_document_column","text":"","code":"find_document_column(df)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/find_document_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the column with the longest character string. — find_document_column","text":"df data.frame search document column.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/find_document_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the column with the longest character string. — find_document_column","text":"name column likely contain documents (.e. text).","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/find_primary_key_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds the first column that can be used as the primary key. — find_primary_key_column","title":"Finds the first column that can be used as the primary key. — find_primary_key_column","text":"function loops given data.frame returns name first column finds used primary key. , first column length unique values equals number rows.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/find_primary_key_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds the first column that can be used as the primary key. — find_primary_key_column","text":"","code":"find_primary_key_column(df)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/find_primary_key_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds the first column that can be used as the primary key. — find_primary_key_column","text":"df data.frame search primary key.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/find_primary_key_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds the first column that can be used as the primary key. — find_primary_key_column","text":"name first column primary key NULL one found.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/get_coding_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a table where each row represents a text coded by a coder and each\ncolumn represents the number of codes present by that coder. — get_coding_table","title":"Returns a table where each row represents a text coded by a coder and each\ncolumn represents the number of codes present by that coder. — get_coding_table","text":"Returns table row represents text coded coder column represents number codes present coder.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/get_coding_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a table where each row represents a text coded by a coder and each\ncolumn represents the number of codes present by that coder. — get_coding_table","text":"","code":"get_coding_table(qda_data, aggregate_fun = sum)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/get_coding_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a table where each row represents a text coded by a coder and each\ncolumn represents the number of codes present by that coder. — get_coding_table","text":"qda_data qda() object. aggregate_fun function used aggregate multiple tags per text per per coder. See reshape2::dcast() information.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/get_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a color palette to use for code highlighting. — get_colors","title":"Returns a color palette to use for code highlighting. — get_colors","text":"Returns color palette use code highlighting.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/get_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a color palette to use for code highlighting. — get_colors","text":"","code":"get_colors()"},{"path":"https://jbryer.github.io/ShinyQDA/reference/highlighter.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlights the codes within the text using HTML. — highlighter","title":"Highlights the codes within the text using HTML. — highlighter","text":"Highlights codes within text using HTML.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/highlighter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlights the codes within the text using HTML. — highlighter","text":"","code":"highlighter(text, codings, codes, link = TRUE)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/highlighter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlights the codes within the text using HTML. — highlighter","text":"text text highlight. codings data.frame codings. codes data.frame codes (colors). link TRUE codes link modal dialog edit .","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/lexicon_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Color palettes for the various sentiment lexicons — lexicon_colors","title":"Color palettes for the various sentiment lexicons — lexicon_colors","text":"defines colors used various sentiment analyses. element list corresponds sentiment dictionary element character vector names correspond sentiment words values hex colors.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/lexicon_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color palettes for the various sentiment lexicons — lexicon_colors","text":"","code":"lexicon_colors"},{"path":"https://jbryer.github.io/ShinyQDA/reference/lexicon_colors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Color palettes for the various sentiment lexicons — lexicon_colors","text":"list containing character vectors.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/missing_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to determine whether the package dependencies are available. — missing_dependencies","title":"Utility function to determine whether the package dependencies are available. — missing_dependencies","text":"Utility function determine whether package dependencies available.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/missing_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to determine whether the package dependencies are available. — missing_dependencies","text":"","code":"missing_dependencies(dependencies)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/missing_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to determine whether the package dependencies are available. — missing_dependencies","text":"dependencies character vector package names check.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/missing_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to determine whether the package dependencies are available. — missing_dependencies","text":"character vector packages available.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/modalDialog2.html","id":null,"dir":"Reference","previous_headings":"","what":"Alternative modal dialog. — modalDialog2","title":"Alternative modal dialog. — modalDialog2","text":"Adapted https://stackoverflow.com/questions/63882483/--adjust-shiny-modaldialog-width---dt-object--fully-show--table-","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/modalDialog2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alternative modal dialog. — modalDialog2","text":"","code":"modalDialog2(   ...,   title = NULL,   footer = shiny::modalButton(\"Dismiss\"),   easyClose = FALSE,   fade = TRUE )"},{"path":"https://jbryer.github.io/ShinyQDA/reference/modalDialog2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alternative modal dialog. — modalDialog2","text":"... currently unused. title modal dialog title. footer footer modal dialog. easyClose TRUE, modal dialog can dismissed clicking outside dialog box, pressing Escape key. fade FALSE, modal dialog fade-animation (simply appear rather fade view).","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/new_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new ShinyQDA application — new_app","title":"Create a new ShinyQDA application — new_app","text":"Create new ShinyQDA application","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/new_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new ShinyQDA application — new_app","text":"","code":"new_app(   name = \"My_ShinyQDA\",   dir = ifelse(interactive(), rstudioapi::selectDirectory(caption =     \"Select location for ShinyQDA application\"), getwd()),   qda_data,   id_column = find_primary_key_column(qda_data),   text_column = find_document_column(qda_data),   initialize_sentiment_dictionaries = TRUE,   run_app = interactive(),   ... )"},{"path":"https://jbryer.github.io/ShinyQDA/reference/new_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new ShinyQDA application — new_app","text":"name name application directory. dir directory application created. qda_data data.frame text data. id_column name column qda_data primary key. text_column name column qda_data containing text data. initialize_sentiment_dictionaries whether copy sentiment dictionaries app directory. run_app TRUE Shiny application started created. ... parameters passed qda().","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/new_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new ShinyQDA application — new_app","text":"Returns qda() object.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda.html","id":null,"dir":"Reference","previous_headings":"","what":"Data object for qualitative data analysis. — qda","title":"Data object for qualitative data analysis. — qda","text":"function creates object manipulate data qualitative analysis. data stored SQLite database default, can configures work SQL database DBI R package interface. Although can manipulate SQL database directly, recommend using methods (functions) defined returned object. ensure data integrity.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data object for qualitative data analysis. — qda","text":"","code":"qda(   file,   users_passphrase = \"ShinyQDA\",   users = c(\"admin\"),   users_names = users,   users_passwords = rep(\"password\", length(users)),   users_is_admin = rep(TRUE, length(users)) )"},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data object for qualitative data analysis. — qda","text":"file filename path file function save data . users_passphrase passpharse used encrypt user authentication table. See shinymanager::create_db() info. users vector usernames can login ShinyQDA app. users_names vector names users. users_passwords vector passwords users. users_is_admin logicial vector indicating user administrator privileges.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data object for qualitative data analysis. — qda","text":"list functions access edit qualitiative data.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Data object for qualitative data analysis. — qda","text":"log(coder, table, description, timestamp) get_log() get_last_update() add_text(df, id_col, text_col, overwrite, append) get_text(id) add_coding(id, text, start, end, codes, coder) update_coding(coding_id, codes) delete_coding(coding_id) get_codings(id, coding_id) get_codes() add_codes(codes, colors, descriptions) update_code(code, color, description, parent) add_code_question(stem, type, order, options) delete_code_question(stem) get_code_questions() get_code_question_responses(coding_id, id) delete_code_question_responses(coding_id) add_code_question_response(coding_id, stem, answer, coder) update_code_question_response(coding_id, stem, answer, coder) add_text_question(stem, type, order, options) get_text_questions() delete_text_question(stem) get_text_question_responses(id, coder) delete_text_question_responses(id, coder) update_text_question_response(id, stem, new_answer, coder) add_text_question_response(id, stem, answer, coder) get_rubrics() get_rubric(rubric_name) add_rubric(rubric_name, description, rubric, scoring_levels, enabled) update_rubric_criteria(rubric_name, criteria, score_level, description) delete_rubric_response(rubric_name, qda_id, coder, criteria) add_rubric_response(rubric_name, qda_id, coder, criteria, score) get_rubric_responses(rubric_name, qda_id, coder) get_assignments(coder, id) get_coders()","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda_datatable.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to datatable function. — qda_datatable","title":"Wrapper to datatable function. — qda_datatable","text":"wrapper DT::datatable() function. primary purpose centralize options datatable tables ShinyQDA app consistent.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda_datatable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to datatable function. — qda_datatable","text":"","code":"qda_datatable(df)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda_datatable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to datatable function. — qda_datatable","text":"df data.frame.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merges codings with the text data. — qda_merge","title":"Merges codings with the text data. — qda_merge","text":"Merges codings text data.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merges codings with the text data. — qda_merge","text":"","code":"qda_merge(   qda_data,   include_code_counts = TRUE,   include_codes = TRUE,   include_text_counts = TRUE,   include_text_questions = TRUE,   include_code_questions = TRUE,   sentiment_dir,   include_sentiments = FALSE,   include_bing_sentiment = include_sentiments,   include_nrc_sentiment = include_sentiments,   include_loughran_sentiment = include_sentiments,   include_afinn_sentiment = include_sentiments,   ... )"},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merges codings with the text data. — qda_merge","text":"qda_data qda() object. include_code_counts include code counts returned data.frame. include_codes include columns code. column start code_. include_text_counts include number characters, words, sentences, paragraphs. include_text_questions include responses text questions returned data.frame. include_code_questions include code question responses returned data.frame. sentiment_dir specified, sentiment lexicon loaded given directory. include_sentiments include sentiment analysis returend data.frame. include_bing_sentiment include Bing sentiment analysis returned data.frame. Columns begin bing_. include_nrc_sentiment include NRC sentiment analysis returned data.frame. Columns begin nrc_. include_loughran_sentiment include Loughran sentiment analysis returned data.frame. Columns begin loughran_. include_afinn_sentiment include AFINN sentiment analysis returned data.frame. Columns begin afinn_. ... parameters passed functions.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda_view_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Server the raw data view. — qda_view_server","title":"Server the raw data view. — qda_view_server","text":"Server raw data view.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda_view_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server the raw data view. — qda_view_server","text":"","code":"qda_view_server(id, qda_data)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda_view_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server the raw data view. — qda_view_server","text":"id ID string corresponds ID used call module's UI function. qda_data QDA data object, see qda().","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda_view_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"UI for the raw data view. — qda_view_ui","title":"UI for the raw data view. — qda_view_ui","text":"display tab group table qda() data object.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda_view_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI for the raw data view. — qda_view_ui","text":"","code":"qda_view_ui(id, download_xlsx = TRUE, download_rda = TRUE)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/qda_view_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI for the raw data view. — qda_view_ui","text":"id ID string corresponds ID used call module's UI function. download_xlsx include download Excel button. download_rda include download R data button.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/question_responses_to_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to convert code and text questions to a wide data.frame. — question_responses_to_data_frame","title":"Utility function to convert code and text questions to a wide data.frame. — question_responses_to_data_frame","text":"Utility function convert code text questions wide data.frame.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/question_responses_to_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to convert code and text questions to a wide data.frame. — question_responses_to_data_frame","text":"","code":"question_responses_to_data_frame(questions, responses, id_col)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/question_responses_to_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to convert code and text questions to a wide data.frame. — question_responses_to_data_frame","text":"questions data.frame questions responses data.frame question responses. id_col name id column.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/questions_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Server the raw data view. — questions_server","title":"Server the raw data view. — questions_server","text":"Server raw data view.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/questions_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server the raw data view. — questions_server","text":"","code":"questions_server(id, qda_data, page_length = 20)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/questions_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server the raw data view. — questions_server","text":"id ID string corresponds ID used call module's UI function. qda_data QDA data object, see qda(). page_length default number rows show table.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/questions_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"UI for the raw data view. — questions_ui","title":"UI for the raw data view. — questions_ui","text":"display tab group table qda() data object.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/questions_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI for the raw data view. — questions_ui","text":"","code":"questions_ui(id)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/questions_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI for the raw data view. — questions_ui","text":"id ID string corresponds ID used call module's UI function.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/reliability_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Server for the inter-rater reliability analysis. — reliability_server","title":"Server for the inter-rater reliability analysis. — reliability_server","text":"Server inter-rater reliability analysis.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/reliability_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server for the inter-rater reliability analysis. — reliability_server","text":"","code":"reliability_server(id, qda_data)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/reliability_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server for the inter-rater reliability analysis. — reliability_server","text":"id ID string corresponds ID used call module's UI function. qda_data QDA data object, see qda().","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/reliability_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"UI for the inter-rater reliability analysis. — reliability_ui","title":"UI for the inter-rater reliability analysis. — reliability_ui","text":"UI inter-rater reliability analysis.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/reliability_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI for the inter-rater reliability analysis. — reliability_ui","text":"","code":"reliability_ui(id)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/reliability_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI for the inter-rater reliability analysis. — reliability_ui","text":"id ID string corresponds ID used call module's UI function.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/rubric_edit_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Server logic for the rubric. — rubric_edit_server","title":"Server logic for the rubric. — rubric_edit_server","text":"Server logic rubric.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/rubric_edit_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server logic for the rubric. — rubric_edit_server","text":"","code":"rubric_edit_server(id, qda_data, page_length = 20)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/rubric_edit_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server logic for the rubric. — rubric_edit_server","text":"id ID string corresponds ID used call module's UI function. qda_data QDA data object, see qda(). page_length default number rows show table.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/rubric_edit_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"UI for the rubric. — rubric_edit_ui","title":"UI for the rubric. — rubric_edit_ui","text":"UI rubric.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/rubric_edit_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI for the rubric. — rubric_edit_ui","text":"","code":"rubric_edit_ui(id)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/rubric_edit_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI for the rubric. — rubric_edit_ui","text":"id ID string corresponds ID used call module's UI function.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/sentiment_highlighter.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns an HTML character highlighting the sentiments. — sentiment_highlighter","title":"Returns an HTML character highlighting the sentiments. — sentiment_highlighter","text":"Returns HTML character highlighting sentiments.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/sentiment_highlighter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns an HTML character highlighting the sentiments. — sentiment_highlighter","text":"","code":"sentiment_highlighter(   text,   lexicon = c(\"nrc\", \"bing\", \"loughran\", \"afinn\"),   token = \"words\",   lexicon_dir = \".\" )"},{"path":"https://jbryer.github.io/ShinyQDA/reference/sentiment_highlighter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns an HTML character highlighting the sentiments. — sentiment_highlighter","text":"text text highlight. lexicon sentiment lexicon use. token unit tokenizing. Reasonable options words, sentences, lines, paragraphs. See tidytext::unnest_tokens() details. lexicon_dir directory sentiment directories located.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/sentiment_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sentiment for an individual text. — sentiment_plot","title":"Plot sentiment for an individual text. — sentiment_plot","text":"Plot sentiment individual text.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/sentiment_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sentiment for an individual text. — sentiment_plot","text":"","code":"sentiment_plot(   text,   lexicon = c(\"nrc\", \"bing\", \"loughran\", \"afinn\"),   lexicon_dir = \".\" )"},{"path":"https://jbryer.github.io/ShinyQDA/reference/sentiment_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sentiment for an individual text. — sentiment_plot","text":"text text calculate sentiment bar plot . lexicon sentiment dictionary use. lexicon_dir directory containing sentiment dictionayr.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/sentiment_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Server for the sentiment analysis. — sentiment_server","title":"Server for the sentiment analysis. — sentiment_server","text":"Server sentiment analysis.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/sentiment_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server for the sentiment analysis. — sentiment_server","text":"","code":"sentiment_server(id, qda_data)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/sentiment_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server for the sentiment analysis. — sentiment_server","text":"id ID string corresponds ID used call module's UI function. qda_data QDA data object, see qda().","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/sentiment_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"UI for the sentiment analysis — sentiment_ui","title":"UI for the sentiment analysis — sentiment_ui","text":"UI sentiment analysis","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/sentiment_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI for the sentiment analysis — sentiment_ui","text":"","code":"sentiment_ui(id)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/sentiment_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI for the sentiment analysis — sentiment_ui","text":"id ID string corresponds ID used call module's UI function.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/shinyQDA.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the ShinyQDA application locally. — shinyQDA","title":"Run the ShinyQDA application locally. — shinyQDA","text":"Run ShinyQDA application locally.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/shinyQDA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the ShinyQDA application locally. — shinyQDA","text":"","code":"shinyQDA(   qda_data_file = \"ShinyQDA.sqlite\",   authenticate = !interactive(),   enable_admin = TRUE,   keep_token = TRUE,   users_passphrase = \"ShinyQDA\",   username = Sys.info()[\"user\"],   ... )"},{"path":"https://jbryer.github.io/ShinyQDA/reference/shinyQDA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the ShinyQDA application locally. — shinyQDA","text":"qda_data_file file name save results. See qda() information. authenticate use shinymanager::secure_app(). enable_admin enable admin mode shinymanager. keep_token Logical, keep token used authenticate URL, allow refresh application browser, careful token can shared users. users_passphrase passphrase pass shinymanager. username authenticate FALSE username used run app. ... parameters passed shiny::runApp() shiny::shinyApp().","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/shiny_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny Server for QDA — shiny_server","title":"Shiny Server for QDA — shiny_server","text":"Shiny Server QDA","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/shiny_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny Server for QDA — shiny_server","text":"","code":"shiny_server(input, output, session)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/shiny_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny Server for QDA — shiny_server","text":"input Shiny input object. output Shiny output object. session Shiny session object.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/shiny_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny User Interface for QDA — shiny_ui","title":"Shiny User Interface for QDA — shiny_ui","text":"Shiny User Interface QDA","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/shiny_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny User Interface for QDA — shiny_ui","text":"","code":"shiny_ui(request, debug = TRUE)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/shiny_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny User Interface for QDA — shiny_ui","text":"request Shiny request object. debug parater passed shinyjs::useShinyjs()","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/text_truncate.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the first words that fit within the given number of characeters. — text_truncate","title":"Returns the first words that fit within the given number of characeters. — text_truncate","text":"Returns first words fit within given number characeters.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/text_truncate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the first words that fit within the given number of characeters. — text_truncate","text":"","code":"text_truncate(value, width = 50)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/text_truncate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the first words that fit within the given number of characeters. — text_truncate","text":"value character truncate width maximum number characters resulting string .","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/text_wrap_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap label text. — text_wrap_mod","title":"Wrap label text. — text_wrap_mod","text":"Adapted https://github.com/hadley/ggplot2/wiki/labeller","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/text_wrap_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap label text. — text_wrap_mod","text":"","code":"text_wrap_mod(value, width = 25)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/text_wrap_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap label text. — text_wrap_mod","text":"value vector (converted using .character) wrapped. width maximum width line characters.","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/topic_modeling_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Server for the sentiment analysis. — topic_modeling_server","title":"Server for the sentiment analysis. — topic_modeling_server","text":"Much code analysis adapted https://ladal.edu.au/topicmodels.html","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/topic_modeling_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server for the sentiment analysis. — topic_modeling_server","text":"","code":"topic_modeling_server(id, qda_data)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/topic_modeling_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server for the sentiment analysis. — topic_modeling_server","text":"id ID string corresponds ID used call module's UI function. qda_data QDA data object, see qda().","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/topic_modeling_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"UI for the topic modeling analysis — topic_modeling_ui","title":"UI for the topic modeling analysis — topic_modeling_ui","text":"UI topic modeling analysis","code":""},{"path":"https://jbryer.github.io/ShinyQDA/reference/topic_modeling_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI for the topic modeling analysis — topic_modeling_ui","text":"","code":"topic_modeling_ui(id)"},{"path":"https://jbryer.github.io/ShinyQDA/reference/topic_modeling_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI for the topic modeling analysis — topic_modeling_ui","text":"id ID string corresponds ID used call module's UI function.","code":""}]
